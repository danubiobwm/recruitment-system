@baseUrl = http://localhost:8080

### ========================
### Registrar novo usuário
### ========================
# @name register
POST {{baseUrl}}/register
Content-Type: application/json

{
  "email": "user@example.com",
  "password": "password123"
}

### ========================
### Login para obter token
### ========================
# @name login
POST {{baseUrl}}/login
Content-Type: application/json

{
  "email": "user@example.com",
  "password": "password123"
}

@auth_token = {{login.response.body.token}}

### ========================
### Obter usuário atual
### ========================
GET {{baseUrl}}/api/me
Authorization: Bearer {{auth_token}}

### ========================
### Criar vaga
### ========================
# @name create_job
POST {{baseUrl}}/api/jobs
Authorization: Bearer {{auth_token}}
Content-Type: application/json

{
  "title": "Desenvolvedor Backend Go",
  "description": "Trabalhar com microsserviços em Golang",
  "status": "open"
}

@job_id = {{create_job.response.body.id}}

### ========================
### Listar todas as vagas
### ========================
# @name list_jobs
GET {{baseUrl}}/api/jobs
Authorization: Bearer {{auth_token}}

### ========================
### Obter vaga específica
### ========================
GET {{baseUrl}}/api/jobs/1
Authorization: Bearer {{auth_token}}

### ========================
### Atualizar vaga
### ========================
PUT {{baseUrl}}/api/jobs/1
Authorization: Bearer {{auth_token}}
Content-Type: application/json

{
  "title": "Desenvolvedor Backend Go Pleno",
  "description": "Desenvolver e manter microsserviços em Golang",
  "status": "open"
}

### ========================
### Deletar vaga
### ========================
DELETE {{baseUrl}}/api/jobs/1
Authorization: Bearer {{auth_token}}

### ========================
### Criar candidato
### ========================
# @name create_candidate
POST {{baseUrl}}/api/candidates
Authorization: Bearer {{auth_token}}
Content-Type: application/json

{
  "name": "João Silva",
  "email": "joao@example.com",
  "phone": "11999999999",
  "resume": "https://linkedin.com/in/joao",
  "status": "applied",
  "jobId": 1
}

@candidate_id = {{create_candidate.response.body.id}}

### ========================
### Listar candidatos
### ========================
GET {{baseUrl}}/api/candidates
Authorization: Bearer {{auth_token}}

### ========================
### Obter candidato específico
### ========================
GET {{baseUrl}}/api/candidates/1
Authorization: Bearer {{auth_token}}

### ========================
### Atualizar candidato
### ========================
PUT {{baseUrl}}/api/candidates/1
Authorization: Bearer {{auth_token}}
Content-Type: application/json

{
  "name": "João da Silva",
  "email": "joao.silva@example.com",
  "phone": "11988888888",
  "status": "interviewing"
}

### ========================
### Deletar candidato
### ========================
DELETE {{baseUrl}}/api/candidates/{{candidate_id}}
Authorization: Bearer {{auth_token}}
